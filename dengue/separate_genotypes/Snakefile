serotype_genotypes = ['denv1_I', 'denv1_III', 'denv1_IV', 'denv1_V',
'denv2_AA', 'denv2_AI', 'denv2_AM', 'denv2_C',
'denv3_I', 'denv3_II', 'denv3_III', 'denv4_I', 'denv4_II']

rule all:
    input:
        auspice_json = expand("auspice/dengue_{serotype_genotype}.json", serotype_genotype=serotype_genotypes)

rule files:
    params:
        dropped_strains = "config/dropped_strains.txt",
        sequences = "data/dengue_{serotype_genotype}.fasta"

files = rules.files.params

def get_reference_file(w):
    serotype_map = {'denv1_I':'denv1', 'denv1_II':'denv1', 'denv1_III':'denv1',
    'denv1_IV':'denv1', 'denv1_V':'denv1',
    'denv2_AA':'denv2', 'denv2_AI':'denv2', 'denv2_AM':'denv2', 'denv2_C':'denv2',
    'denv3_I':'denv3', 'denv3_II':'denv3', 'denv3_III':'denv3',
    'denv4_I':'denv4', 'denv4_II':'denv4'}

    serotype = serotype_map[w.serotype_genotype]
    reference_file = f"config/reference_dengue_{serotype}.gb"

    return reference_file

def get_auspice_config_file(w):
    serotype_map = {'denv1_I':'denv1', 'denv1_II':'denv1', 'denv1_III':'denv1',
    'denv1_IV':'denv1', 'denv1_V':'denv1',
    'denv2_AA':'denv2', 'denv2_AI':'denv2', 'denv2_AM':'denv2', 'denv2_C':'denv2',
    'denv3_I':'denv3', 'denv3_II':'denv3', 'denv3_III':'denv3',
    'denv4_I':'denv4', 'denv4_II':'denv4'}

    serotype = serotype_map[w.serotype_genotype]
    auspice_config = f"config/auspice_config_{serotype}.json"

    return auspice_config



rule parse:
    message: "Parsing fasta into sequences and metadata"
    input:
        sequences = files.sequences
    output:
        sequences = "results/sequences_{serotype_genotype}.fasta",
        metadata = "results/metadata_{serotype_genotype}.tsv"
    params:
        fasta_fields = "strain virus accession date region country division city db segment authors url title journal paper_url",
        prettify_fields = "region country division city"
    shell:
        """
        augur parse \
            --sequences {input.sequences} \
            --output-sequences {output.sequences} \
            --output-metadata {output.metadata} \
            --fields {params.fasta_fields} \
            --prettify-fields {params.prettify_fields}
        """

rule align:
    message:
        """
        Aligning sequences to reference
          - filling gaps with N
        """
    input:
        sequences = rules.parse.output.sequences,
        reference = get_reference_file
        # reference = files.reference
    output:
        alignment = "results/aligned_{serotype_genotype}.fasta"
    shell:
        """
        augur align \
            --sequences {input.sequences} \
            --reference-sequence {input.reference} \
            --output {output.alignment} \
            --fill-gaps \
            --remove-reference \
            --nthreads 1
        """

rule tree:
    message: "Building tree"
    input:
        alignment = rules.align.output.alignment
    output:
        tree = "results/tree-raw_{serotype_genotype}.nwk"
    shell:
        """
        augur tree \
            --alignment {input.alignment} \
            --output {output.tree} \
            --nthreads 1
        """

rule refine:
    message:
        """
        Refining tree
          - estimate timetree
          - use {params.coalescent} coalescent timescale
          - estimate {params.date_inference} node dates
          - filter tips more than {params.clock_filter_iqd} IQDs from clock expectation
        """
    input:
        tree = rules.tree.output.tree,
        alignment = rules.align.output,
        metadata = rules.parse.output.metadata
    output:
        tree = "results/tree_{serotype_genotype}.nwk",
        node_data = "results/branch-lengths_{serotype_genotype}.json"
    params:
        coalescent = "const",
        date_inference = "marginal",
        clock_filter_iqd = 4
    shell:
        """
        augur refine \
            --tree {input.tree} \
            --alignment {input.alignment} \
            --metadata {input.metadata} \
            --output-tree {output.tree} \
            --output-node-data {output.node_data} \
            --timetree \
            --coalescent {params.coalescent} \
            --date-confidence \
            --date-inference {params.date_inference} \
            --clock-filter-iqd {params.clock_filter_iqd}
        """

rule ancestral:
    message: "Reconstructing ancestral sequences and mutations"
    input:
        tree = rules.refine.output.tree,
        alignment = rules.align.output
    output:
        node_data = "results/nt-muts_{serotype_genotype}.json"
    params:
        inference = "joint"
    shell:
        """
        augur ancestral \
            --tree {input.tree} \
            --alignment {input.alignment} \
            --output-node-data {output.node_data} \
            --inference {params.inference}
        """

rule translate:
    message: "Translating amino acid sequences"
    input:
        tree = rules.refine.output.tree,
        node_data = rules.ancestral.output.node_data,
        reference = get_reference_file
    output:
        node_data = "results/aa-muts_{serotype_genotype}.json"
    shell:
        """
        augur translate \
            --tree {input.tree} \
            --ancestral-sequences {input.node_data} \
            --reference-sequence {input.reference} \
            --output {output.node_data} \
        """

rule traits:
    message:
        """
        Inferring ancestral traits for {params.columns!s}
          - increase uncertainty of reconstruction by {params.sampling_bias_correction} to partially account for sampling bias
        """
    input:
        tree = rules.refine.output.tree,
        metadata = rules.parse.output.metadata
    output:
        node_data = "results/traits_{serotype_genotype}.json",
    params:
        columns = 'country region',
        sampling_bias_correction = 3
    shell:
        """
        augur traits \
            --tree {input.tree} \
            --metadata {input.metadata} \
            --output {output.node_data} \
            --columns {params.columns} \
            --confidence \
            --sampling-bias-correction {params.sampling_bias_correction}
        """

rule export:
    message: "Exporting data files for for auspice"
    input:
        tree = rules.refine.output.tree,
        metadata = rules.parse.output.metadata,
        branch_lengths = rules.refine.output.node_data,
        traits = rules.traits.output.node_data,
        nt_muts = rules.ancestral.output.node_data,
        aa_muts = rules.translate.output.node_data,
        auspice_config = get_auspice_config_file
    output:
        auspice_json = "auspice/dengue_{serotype_genotype}.json"
    shell:
        """
        augur export v2 \
            --tree {input.tree} \
            --metadata {input.metadata} \
            --node-data {input.branch_lengths} {input.traits} {input.nt_muts} {input.aa_muts} \
            --auspice-config {input.auspice_config} \
            --output {output.auspice_json}
        """

rule clean:
    message: "Removing directories: {params}"
    params:
        "results ",
        "auspice"
    shell:
        "rm -rfv {params}"
